buildscript {
    apply from: 'config.gradle'
    dependencies {
        classpath libs.arouter.register

//        //https://github.com/bytedance/ByteX
//        classpath 'com.bytedance.android.byteX:base-plugin:0.3.0'
//        classpath 'com.bytedance.android.byteX:refer-check-plugin:0.3.0'
//        //hook 工具 https://github.com/Knight-ZXW/LancetX
//        classpath "io.github.knight-zxw:lancet-plugin:0.0.4"
    }
}

plugins {
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.android.library) apply false
    alias(libs.plugins.kotlin.android) apply false
    alias(libs.plugins.kotlin.jvm) apply false
    alias(libs.plugins.kotlin.kapt) apply false
    alias(libs.plugins.hilt.android) apply false
}

allprojects {
    //配置说明 https://juejin.cn/post/6908232077200588814
    configurations.all { Configuration c ->
        // 所有的依赖降级策略
        c.resolutionStrategy {
            dependencySubstitution {
                all { DependencySubstitution dependency ->
                    if (dependency.requested instanceof ModuleComponentSelector) {
                        // 如果发现项目内存在 group +name 等于远端的group+name  那么直接采用本地工程进行编译
                        def p = rootProject.allprojects.find { p -> p.group == dependency.requested.group && p.name == dependency.requested.module }
                        if (p != null) {
                            println "选择本地模块：" + p.name
                            dependency.useTarget(project(p.path), '选择本地模块')
                        }
                    }
                }
            }
        }
    }
    afterEvaluate {
        if (project.plugins.hasPlugin('com.android.library') || project.plugins.hasPlugin('com.android.application')) {
            def android = project.extensions.getByName('android')
            android.compileOptions {
                sourceCompatibility JavaVersion.VERSION_17
                targetCompatibility JavaVersion.VERSION_17
            }
            android.kotlinOptions {
                jvmTarget = '17'
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// 项目构建之前
gradle.settingsEvaluated {
    println "初始化阶段0 settingsEvaluated"
}
gradle.projectsLoaded {
    println "初始化阶段1 projectsLoaded"
}
// 配置阶段
gradle.beforeProject {
    println "配置阶段0 beforeProject"
}
gradle.afterProject {
    println "配置阶段1 afterProject"
}
gradle.projectsEvaluated {
    println "配置阶段2 projectsEvaluated"
}
gradle.taskGraph.whenReady {
    println "配置阶段3 taskGraph.whenReady"
}
// 执行阶段
gradle.taskGraph.beforeTask {
    println "执行阶段0 taskGraph.beforeTask"
}
gradle.taskGraph.afterTask {
    println "执行阶段1 taskGraph.afterTask"
}
gradle.buildFinished {
    println "执行阶段2 buildFinished"
}
