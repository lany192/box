if (isModule.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'com.alibaba.arouter'

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

android {
    namespace apk.appId + '.' + project.getName()
    compileSdk apk.compileSdkVersion

    defaultConfig {
        minSdk apk.minSdkVersion
        targetSdk apk.targetSdkVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        if (isModule.toBoolean()) {
            applicationId namespace
            versionCode apk.versionCode
            versionName apk.versionName
            multiDexEnabled true
            ndk {
                abiFilters 'armeabi-v7a', 'arm64-v8a'
            }
        }
    }

    sourceSets {
        main {
            if (isModule.toBoolean()) {
                java.srcDirs = ['src/main/java', 'src/develop/java']
                res.srcDirs = ['src/main/res', 'src/develop/res']
                manifest.srcFile 'src/develop/AndroidManifest.xml'
            } else {
                java.srcDirs = ['src/main/java']
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
        }
    }

    buildFeatures {
        viewBinding true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
    packagingOptions {
        resources {
            excludes += ['**/*.properties', '**/*.txt']
            excludes += ['META-INF/*.info', 'META-INF/*.version']
            excludes += ['META-INF/*.md', 'META-INF/*.kotlin_module']
            excludes += ['META-INF/maven/com.squareup.okio/okio/pom.xml', 'META-INF/ASL2.0']
            excludes += ['META-INF/MANIFEST.MF', 'META-INF/NOTICE', 'META-INF/LICENSE']
            excludes += ['META-INF/INDEX.LIST', 'META-INF/DEPENDENCIES', 'META-INF/LGPL2.1']
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation project(path: ':common:router')
    implementation project(path: ':common:network')
    implementation project(path: ':library:arch')
    implementation project(path: ':library:view')
    implementation project(path: ':library:core')
    implementation project(path: ':library:dialog')
    implementation project(path: ':library:time')
    implementation project(path: ':library:tablayout')
    implementation project(path: ':library:html')
    implementation project(path: ':library:log')

    testImplementation libs.junit
    androidTestImplementation libs.androidx.test.ext.junit2
    androidTestImplementation libs.androidx.test.espresso

    kapt libs.hilt.compiler
    kapt libs.arouter.compiler
    kapt libs.androidx.room.compiler

    implementation libs.androidx.appcompat
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.material
    implementation libs.androidx.recyclerview
    implementation libs.brvah
    implementation libs.hilt.android
    implementation libs.arouter.api
    implementation libs.androidx.room.runtime
    implementation libs.androidx.room.ktx

    if (isModule.toBoolean()) {
        implementation libs.androidx.multidex
        implementation libs.androidx.exifinterface
        implementation libs.coroutines.core
        implementation libs.coroutines.android
        implementation libs.toaster
        implementation libs.immersionbar

        implementation libs.tencent.mmkv
        implementation libs.tencent.xlog
        implementation libs.glide
        implementation libs.xcrash
        implementation libs.refresh.header
        implementation libs.refresh.layout
        implementation libs.backgroundx
        implementation libs.eventbus
        implementation libs.phoenix
        implementation libs.permissions
    }
}