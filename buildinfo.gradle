gradle.settingsEvaluated {
    println "初始化阶段0 settingsEvaluated"
}
gradle.projectsLoaded {
    println "初始化阶段1 projectsLoaded"
}




gradle.beforeProject {
    println "配置阶段0 beforeProject"
}
gradle.afterProject {
    println "配置阶段1 afterProject"
}




gradle.projectsEvaluated {
    println "配置阶段2 projectsEvaluated"
}
gradle.taskGraph.whenReady {
    println "配置阶段3 taskGraph.whenReady"
}



//
///**
// * wiki: https://juejin.cn/post/6844903607679057934
// * 1、初始化阶段
// */
//def beginOfSetting = System.currentTimeMillis()
//gradle.projectsLoaded {
//    println '----------------------初始化阶段----------------------'
//    println '初始化阶段，耗时：' + (System.currentTimeMillis() - beginOfSetting) + 'ms'
//    println '----------------------初始化阶段----------------------'
//}
//
///**
// * 2、配置阶段
// */
//def beginOfConfig
//def configHasBegin = false
//def beginOfProjectConfig = new HashMap()
//def configList = new ArrayList()
//gradle.beforeProject { project ->
//    if (!configHasBegin) {
//        configHasBegin = true
//        beginOfConfig = System.currentTimeMillis()
//    }
//    beginOfProjectConfig.put(project, System.currentTimeMillis())
//}
//gradle.afterProject { project ->
//    def begin = beginOfProjectConfig.get(project)
//    configList.add("$project 耗时：${System.currentTimeMillis() - begin} ms")
//}
//
//def beginOfProjectExecute = 0L
//gradle.taskGraph.whenReady {
//    println '----------------------配置阶段----------------------'
//    configList.forEach { configStr ->
//        println(configStr)
//    }
//    println "配置阶段，总共耗时：${(System.currentTimeMillis() - beginOfConfig)} ms"
//    println '----------------------配置阶段----------------------'
//    beginOfProjectExecute = System.currentTimeMillis()
//}
//
///**
// * 3、执行阶段
// */
//def taskList = new ArrayList()
//gradle.taskGraph.beforeTask { task ->
//    task.doFirst {
//        task.ext.beginOfTask = System.currentTimeMillis()
//    }
//    task.doLast {
//        /**
//         * 1、在Gradle中，task实例是通过实现task的实现类来创建的。当在Gradle文件中定义一个task时，Gradle会根据定义的task的名称和类型来创建对应的task实例。
//         * 2、对于task实例，Gradle会为其生成一个代理类，这个代理类是task实例的包装类，它实现了所有task的接口，并包含了task的所有属性和方法。这个代理类的名称通常是task的实现类名称加上'_Decorated'，例如，如果task的实现类名称为MyTask，那么代理类的名称就是MyTask_Decorated。
//         * 3、当在Gradle文件中引用task实例时，实际上是在引用这个代理类，而不是task实现类本身。代理类负责调用task实现类中的方法和属性，并将结果返回给Gradle。这样做的好处是，代理类可以提供一些附加功能，例如缓存task的输出结果或拦截task的方法调用。
//         * 因此，当在Gradle文件中使用task.class.name来引用task实现类时，实际上是引用了task的代理类名称，这个代理类包装了task实现类，并提供了额外的功能和接口。
//         */
//        taskList.add("$task : ${task.class.name - '_Decorated'} ：耗时${System.currentTimeMillis() - task.beginOfTask} ms")
//    }
//}
//gradle.buildFinished {
//    println '----------------------执行阶段----------------------'
//    taskList.forEach { taskStr ->
//        println(taskStr)
//    }
//    println "执行阶段，总耗时：${System.currentTimeMillis() - beginOfProjectExecute} ms"
//    println '----------------------执行阶段----------------------'
//}
